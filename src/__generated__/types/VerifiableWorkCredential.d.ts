/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * hash of the transaction
 */
export type TxHash = string;
/**
 * payee address
 */
export type To = string;
/**
 * payer address
 */
export type From = string;
/**
 * whether or not DID is payer
 */
export type IsPayer = boolean;
/**
 * paid value
 */
export type Value = string;
/**
 * paid token symbol
 */
export type TokenSymbol = string;
/**
 * paid token decimal
 */
export type TokenDecimal = number;
/**
 * fiat price at the time of the transaction
 */
export type Value1 = string;
/**
 * currently only support USD
 */
export type FiatSymbol = string;
/**
 * network id of the transaction
 */
export type NetworkId = number;
/**
 * Time stamp of transaction occurrence
 */
export type IssuedTimestamp = string;
export type RelatedAddress = string[];
export type RelatedTxHashes = string[];
/**
 * current formats are url or cid
 */
export type Format = string;
/**
 * work deliverable value(url/cid)
 */
export type Value2 = string;
export type Deliverables = DeliverableItem[];
/**
 * signature of holder
 */
export type HolderSig = string;
/**
 * DID of agent
 */
export type PartnerSigner = string;
/**
 * signature of partner
 */
export type PartnerSig = string;
/**
 * DID of agent
 */
export type AgentSigner = string;
/**
 * signature of agent
 */
export type AgentSig = string;
export type Evidences = Evidence[];
export type UpdatedAt = string;

export interface VerifiableWorkCredential {
  "@context": string[];
  type: string[];
  id: string;
  issuer: {
    id: string;
    ethereumAddress?: string;
    [k: string]: unknown;
  };
  credentialSubject: {
    id: string;
    [k: string]: unknown;
  };
  credentialSchema: {
    id: string;
    type: string;
  };
  issuanceDate: string;
  expirationDate?: string;
  proof?: {
    type: string;
    verificationMethod?: string;
    ethereumAddress?: string;
    created?: string;
    proofPurpose?: string;
    proofValue?: string;
    eip712?: {
      domain: {
        chainId: number;
        name: string;
        version: string;
        verifyingContract?: string;
      };
      types: {
        [k: string]: unknown;
      };
      primaryType: string;
    };
    [k: string]: unknown;
  };
  evidence?: Evidences;
  credentialStatus?: {
    id: string;
    type: string;
  };
  updatedAt?: UpdatedAt;
}
export interface Evidence {
  id: string;
  type: string[];
  verifier?: string;
  evidenceDocument?: string;
  subjectPresence?: string;
  documentPresence?: string;
  item?: Transaction | Deliverables | Signatures;
  [k: string]: unknown;
}
export interface Transaction {
  txHash: TxHash;
  to?: To;
  from?: From;
  isPayer?: IsPayer;
  value?: Value;
  tokenSymbol?: TokenSymbol;
  tokenDecimal?: TokenDecimal;
  fiatValue?: Value1;
  fiatSymbol?: FiatSymbol;
  networkId?: NetworkId;
  issuedTimestamp?: IssuedTimestamp;
  relatedAddresses?: RelatedAddress;
  relatedTxHashes?: RelatedTxHashes;
}
export interface DeliverableItem {
  format?: Format;
  value?: Value2;
}
export interface Signatures {
  holderSig?: HolderSig;
  partnerSigner?: PartnerSigner;
  partnerSig?: PartnerSig;
  agentSigner?: AgentSigner;
  agentSig?: AgentSig;
}
